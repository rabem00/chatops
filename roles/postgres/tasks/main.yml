---
# get ip and register so we can re-use it
- name: Get ip
  setup: filter=ansible_eth0
  register: postgres_server_ip

- name: Ensure that the packages are installed
  yum: name={{item}}
  with_items:
    - postgresql-server
    - postgresql-contrib
    - python-psycopg2

- name: Stop old postgresql service
  service: name="postgresql" state=stopped
  when: postgresql_drop_old_installation

- name: Remove old postgresql installation
  file: path={{ postgresql_data_directory }} state=absent
  when: postgresql_drop_old_installation

- name: Check if initialized db exists
  stat: path={{ postgresql_data_directory }}/base
  register: db_datadir_path

- name: Run postgresql-setup initdb
  command: "postgresql-setup initdb"
  when: db_datadir_path.stat.exists == False

- name: Restart postgresql service
  service: name="postgresql" state=started enabled=yes

- name: Database should be created
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{ db_name }}"

- name: User should have access to the database
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: ALL

- name: User should not have unnecessary privilege(s)
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{ db_user }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB

- name: Configure {{ postgresql_data_directory }}/postgresql.conf
  lineinfile:
    dest: "/var/lib/pgsql/data/postgresql.conf"
    state: present
    regexp: "{{ item.regexp }}"
    line: "{{ item.guc }}"
  with_items: postgresql_conf_default_guc
  register: db_config

- name: Configure {{ postgresql_data_directory }}/pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_data_directory }}/pg_hba.conf"
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0640
  register: db_config

- name: Create postgresql log directory structure
  file:
    path: "{{ postgresql_log_directory }}"
    state: directory
    owner: "{{ postgresql_admin_user }}"
    group: "{{ postgresql_admin_user }}"
    mode: 0755
  when: postgresql_log_directory is defined
  register: db_config

- name: Reload postgresql service
  service: name="postgresql" state=reloaded
  when: db_config.changed
